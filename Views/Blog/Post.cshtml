@model Post
@inject IOptionsSnapshot<BlogSettings> settings
@{
    ViewData["Title"] = Model.Title;
    ViewData["Description"] = Model.Excerpt ?? settings.Value.Name + " | " + settings.Value.Description;
    bool showFullPost = ViewContext.RouteData.Values.ContainsKey("slug");
    string host = Context.Request.Scheme + "://" + Context.Request.Host;
}

@section Head {
    <link rel="canonical" href="@(host + Model.GetLink())" />
}

<article class="post" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost">
    @if (string.IsNullOrWhiteSpace(Model.MediaUrl))
    {
        <div class="container">
            <header class="no-media">
                <h1 itemprop="name headline"><a href="@Model.GetLink()" rel="canonical" itemprop="url">@Model.Title</a></h1>
                <time datetime="@Model.PubDate.ToString("s")" itemprop="datePublished">Published @Model.PubDate.ToString("MMM d, yyyy")</time>
                @if (User.Identity.IsAuthenticated)
                {
                    <a asp-controller="Blog" asp-action="edit" asp-route-id="@Model.ID" title="Edit the post">Edit post</a>
                }
            </header>
        </div>
    }
    else
    {
        <header class="media" style="background-image: url(@Model.GetMedia(BlogMediaType.PostPrimary))">
            <div class="container">
                <div class="header-inner">
                    <h1 itemprop="name headline"><a href="@Model.GetLink()" rel="canonical" itemprop="url">@Model.Title</a></h1>
                    <time datetime="@Model.PubDate.ToString("s")" itemprop="datePublished">Published @Model.PubDate.ToString("MMM d, yyyy")</time>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <a asp-controller="Blog" asp-action="edit" asp-route-id="@Model.ID" title="Edit the post">Edit post</a>
                    }
                    @if (Model.Excerpt?.Length <= 300)
                    {
                        <div class="excerpt">@Model.Excerpt</div>
                    }
                </div>
            </div>
        </header>
    }

    <div class="container">

        <div itemprop="articleBody mainEntityOfPage" class="article-body" cdnify>
            @Html.Raw(Model.RenderContent())
        </div>

        <footer>

            @if (Model.Categories.Any())
            {
                <ul class="categories">
                    <li> Posted in </li>
                    @foreach (string cat in Model.Categories)
                    {
                        <li itemprop="articleSection"><a href="/category/@cat.ToLowerInvariant()">@cat</a></li>
                    }
                </ul>
            }

            @if (Model.Type == PostType.Post)
            {
                <text>and has</text>
                <a href="@Model.GetLink()#commento" itemprop="discussionUrl" title="Go to the comments section">
                    <span itemprop="commentCount">@Model.Comments.Count</span> comments
                </a>
            }

            @if (Model.LastModified > Model.PubDate)
            {
                <div class="last-updated">Last Updated @Model.LastModified.ToString("g")</div>
            }

            @if (Model.Author != null && Model.IncludeAuthor)
            {
                await Html.RenderPartialAsync("_AuthorComponent.cshtml", Model.Author);
            }

            <meta itemprop="author" content="@settings.Value.Owner" />
            <meta itemprop="dateModified" content="@Model.LastModified.ToString("s")" />
            <meta itemprop="mainEntityOfPage" content="@(host + Model.GetLink())" />
        </footer>
    </div>
</article>

@if (showFullPost && Model.Type == PostType.Post)
{
    <link rel="stylesheet" href="~/css/comments.scss" />
    await Html.RenderPartialAsync("_SocialSharing", Model.Title);
    await Html.RenderPartialAsync("Comments");
}

@if (User.Identity.IsAuthenticated)
{
    @section Scripts {
        <link rel="stylesheet" href="~/css/admin.scss" />
    }
}
