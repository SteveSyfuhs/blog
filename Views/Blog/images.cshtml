@model ImagesModel
@inject IOptionsSnapshot<BlogSettings> settings

@functions {
    private static string ExtractFolder(string url)
    {
        var lastIndex = url.LastIndexOf('/');

        return url.Substring(0, lastIndex);
    }
}


<form enctype="multipart/form-data" method="post">
    <dl class="upload-file">
        <dt>
            Upload <label asp-for="FormFiles"></label>
        </dt>
        <dd>
            <input asp-for="FormFiles" type="file" multiple />
            <span asp-validation-for="FormFiles"></span>
        </dd>
        <dt>
            <input class="btn" type="submit" value="Upload" />
        </dt>
        <dd>
            <ul class="preview image-list">
                <li>
                    <p>No files currently selected for upload</p>
                </li>
            </ul>
        </dd>
    </dl>
</form>


<script>
    const fileTypes = [
        "image/apng",
        "image/bmp",
        "image/gif",
        "image/jpeg",
        "image/pjpeg",
        "image/png",
        "image/svg+xml",
        "image/tiff",
        "image/webp",
        "image/x-icon"
    ];

    function validFileType(file) {
        return fileTypes.includes(file.type);
    }

    function returnFileSize(number) {
        if (number < 1024) {
            return number + 'bytes';
        } else if (number >= 1024 && number < 1048576) {
            return (number / 1024).toFixed(1) + 'KB';
        } else if (number >= 1048576) {
            return (number / 1048576).toFixed(1) + 'MB';
        }
    }

    function updateImageDisplay() {
        while (preview.firstChild) {
            preview.removeChild(preview.firstChild);
        }

        const curFiles = input.files;
        if (curFiles.length === 0) {
            const para = document.createElement('li');
            para.textContent = 'No files currently selected for upload';
            preview.appendChild(para);
        } else {
            const list = document.createElement('ol');
            //list.className = "image-list";
            preview.appendChild(list);

            for (const file of curFiles) {
                const listItem = document.createElement('li');
                const para = document.createElement('p');
                if (validFileType(file)) {
                    para.textContent = `File name ${file.name}, file size ${returnFileSize(file.size)}.`;
                    const image = document.createElement('img');
                    image.src = URL.createObjectURL(file);
                    image.className = "img-upload-preview";

                    listItem.appendChild(image);
                    listItem.appendChild(para);
                } else {
                    para.textContent = `File name ${file.name}: Not a valid file type. Update your selection.`;
                    listItem.appendChild(para);
                }

                list.appendChild(listItem);
            }
        }
    }

    const input = document.querySelector('input');
    const preview = document.querySelector('.preview');

    input.addEventListener('change', updateImageDisplay);

    function deleteImage(x) {
        var element = event.target.parentElement.parentElement;

        fetch('/edit/images?url=' + encodeURI(x), {
            method: "DELETE"
        }).then(resp => {
            console.log(resp);
            element.parentElement.removeChild(element);

        });
    }
</script>

<ul class="image-list">
    @foreach (var folder in Model.Images.GroupBy(i => ExtractFolder(i.Url)))
    {
        <li id="@folder.GetHashCode()">
            <h3>@folder.Key</h3>
            <ul>
                @foreach (var image in folder.OrderByDescending(f => f.Created))
                {
                <li>
                    <a href="@image.Url" target="_blank" id="#@image.Id">
                        <img src="#" data-src="@image.Url" />
                    </a>
                    <div class="delete-image">
                        <a href="#@folder.GetHashCode()" onclick="deleteImage('@image.Url')">X</a>
                    </div>
                    <div>@image.Url.Substring(folder.Key.Length + 1)</div>
                    <div>@image.Created</div>
                </li>
                }
            </ul>
        </li>
    }
</ul>