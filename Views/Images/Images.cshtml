@model ImagesModel

@functions {
    private static string ExtractFolder(string url)
    {
        var lastIndex = url.LastIndexOf('/');

        return url.Substring(0, lastIndex);
    }

    private static void FriendlyFolderName(string name, out string id, out string friendly)
    {
        id = null;
        friendly = null;

        if (Uri.TryCreate(name, UriKind.Absolute, out Uri folderPath))
        {
            id = folderPath.AbsolutePath.Replace("/", "-");

            if (id.StartsWith('-'))
            {
                id = id.Substring(1);
            }

            friendly = id.Split('-').Last();
        }
    }

    private static ImagesFolder GetRoot(ImagesModel images)
    {
        var root = new ImagesFolder();

        foreach (var image in images.Images)
        {
            root.AddImage(image);
        }

        return root;
    }
}

@section Head
{
    <link rel="stylesheet" href="~/css/admin.scss" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
}

<div class="container-xxl">

    <form method="post" id="upload" class="upload-file" asp-controller="Images" asp-action="UploadImage" enctype="multipart/form-data" autocomplete="off">
        <dl class="upload-file">
            <dt>
                Upload<label asp-for="FormFiles"></label>
            </dt>
            <dd>
                <input asp-for="FormFiles" type="file" multiple />
                <span asp-validation-for="FormFiles"></span>
            </dd>

            <dt>
                <label asp-for="UploadFolder"></label>
            </dt>
            <dd>
                <span asp-validation-for="UploadFolder"></span>
                <input asp-for="UploadFolder" autocomplete="off" />

                <button id="btnUpload" onclick="uploadStarted()" class="btn btn-primary" type="submit">
                    <span id="normal" class="normal">Upload</span>
                    <span id="uploading" hidden>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Uploading...
                    </span>
                </button>
            </dd>

            <dt></dt>
            <dd>
                <ul class="preview image-list">
                    <li>
                        <p>No files currently selected for upload</p>
                    </li>
                </ul>
            </dd>
        </dl>
    </form>

    <ul class="nav nav-tabs flex-column float-start image-tabs" id="myTab" role="tablist">
        @foreach (var folder in GetRoot(Model).Folders.OrderByDescending(r => r.Value.Path))
        {
            folder.Value.Active = true;

            await Html.RenderPartialAsync("~/views/images/_ImageFolderNav.cshtml", folder.Value);
        }
    </ul>

    <ul class="image-list">
        <li>
            <div class="tab-content">
                @{
                    var i = 0;
                }

                @foreach (var folder in Model.Images.GroupBy(i => ExtractFolder(i.Url)))
                {
                    FriendlyFolderName(folder.Key, out string folderName, out _);

                    <div class="tab-pane @(i == 0 ? "active" : "")" id="i-@folderName" role="tabpanel" aria-labelledby="i-@folderName-tab">

                        <h3>@(new Uri(folder.Key).AbsolutePath)</h3>

                        <ul>
                            @foreach (var image in folder.OrderByDescending(f => f.Created).ThenBy(f => f.Title))
                            {
                                <li>
                                    <a href="@image.Url" target="_blank" id="#@image.Id">
                                        <img src="#" data-src="@image.Url" class="lib-image" />
                                    </a>
                                    <div class="delete-image" onclick="deleteImage('@image.Url')">
                                        <a>X</a>
                                    </div>

                                    <div>
                                        <code>@image.Url.Substring(folder.Key.Length + 1)</code> | @image.Created.ToString("g")
                                        <button class="btn btn-link" onclick="navigator.clipboard.writeText('@image.Url')">Copy</button>
                                        <div>@image.Size</div>                                        
                                    </div>
                                </li>
                            }
                        </ul>

                    </div>

                    i++;
                }
            </div>
        </li>
    </ul>

    <script>
        function uploadStarted(e) {
            document.querySelector('#btnUpload').setAttribute('disabled', '');
            document.querySelector('#btnUpload #normal').style.display = "none";
            document.querySelector('#btnUpload #uploading').removeAttribute('hidden');
            document.querySelector('form').submit();
        }

        const fileTypes = [
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"
        ];

        function validFileType(file) {
            return fileTypes.includes(file.type);
        }

        function returnFileSize(number) {
            if (number < 1024) {
                return number + 'bytes';
            } else if (number >= 1024 && number < 1048576) {
                return (number / 1024).toFixed(1) + 'kb';
            } else if (number >= 1048576) {
                return (number / 1048576).toFixed(1) + 'mb';
            }
        }

        function updateImageDisplay() {
            while (preview.firstChild) {
                preview.removeChild(preview.firstChild);
            }

            const curFiles = input.files;
            if (curFiles.length === 0) {
                const para = document.createElement('li');
                para.textContent = 'No files currently selected for upload';
                preview.appendChild(para);
            } else {
                const list = document.createElement('ol');
                //list.className = "image-list";
                preview.appendChild(list);

                for (const file of curFiles) {
                    const listItem = document.createElement('li');
                    const para = document.createElement('p');
                    if (validFileType(file)) {
                        para.textContent = `${file.name}; Size ${returnFileSize(file.size)}`;
                        const image = document.createElement('img');
                        image.src = URL.createObjectURL(file);
                        image.className = "img-upload-preview";

                        listItem.appendChild(image);
                        listItem.appendChild(para);
                    } else {
                        para.textContent = `File name ${file.name}: Not a valid file type. Update your selection.`;
                        listItem.appendChild(para);
                    }

                    list.appendChild(listItem);
                }
            }
        }

        const input = document.querySelector('input');
        const preview = document.querySelector('.preview');

        input.addEventListener('change', updateImageDisplay);

        function deleteImage(x) {
            var element = event.target.parentElement;

            if (event.target.localName === 'a') {
                element = element.parentElement;
            }

            fetch('/edit/images?url=' + encodeURI(x), {
                method: "DELETE"
            }).then(_ => {
                element.parentElement.removeChild(element);

            });
        }

        var elements = document.getElementsByClassName('lib-image');

        for (let element of elements) {
            element.addEventListener('delayLoaded', function (e) {
                var img = new Image();
                img.onload = function () {
                    var div = document.createElement('div');
                    div.innerText = this.width + " x " + this.height + " pixels";
                    e.target.parentElement.parentElement.appendChild(div);
                };

                img.src = e.target.getAttribute('data-src');
            });
        }

        var triggerTabList = [].slice.call(document.querySelectorAll('#myTab a'));

        triggerTabList.forEach(function (triggerEl) {
            var tabTrigger = new bootstrap.Tab(triggerEl);

            triggerEl.addEventListener('click', function (event) {
                triggerTabList.forEach(function (t) {
                    t.classList.remove('active');
                });

                var path = triggerEl.getAttribute('data-path');

                if (path) {
                    document.querySelector('#UploadFolder').value = path;
                }

                event.preventDefault();
                tabTrigger.show();
            })
        })
    </script>
</div>