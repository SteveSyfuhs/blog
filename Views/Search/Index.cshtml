@model SearchResults

@functions {
    private static string Pluralize(string singular, string plural, bool condition)
    {
        if (condition)
        {
            return singular;
        }
        else
        {
            return plural;
        }
    }

    private static string Truncate(string value, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < maxLength)
        {
            return value;
        }

        var split = value.Split(' ');

        var words = new List<string>();

        var workingLength = split[0].Length;
        words.Add(split[0]);

        for (var i = 1; i < split.Length; i++)
        {
            if (workingLength + split[i].Length + 1 <= maxLength)
            {
                workingLength += split[i].Length;
                words.Add(split[i]);
            }
            else
            {
                break;
            }
        }

        var final = string.Join(' ', words.ToArray()).Trim();

        if (final.EndsWith('?'))
        {
            final = final.Substring(0, final.Length - 1);
        }

        return final + "...";
    }
}

<nav class="container search-page">

    <form action="/search" method="get">

        @if (Model == null)
        {
            <h1>Search this site</h1>
        }

        <input id="q" class="searchbox" name="q" type="search" maxlength="1000"
               autocapitalize="off" autocomplete="off" spellcheck="false"
               title="Enter your search term" autofocus="autofocus"
               aria-autocomplete="both"
               value="@Model?.Query" placeholder="Search..." />
    </form>

    @if (Model != null)
    {
        <div class="search-results">

            <h1>@Model.Results Search @Pluralize("Result", "Results", Model.Results == 1) for @Model.Query</h1>

            <ul class="results-list">
                @foreach (var post in Model.Posts)
                {
                    <li data-weight="@post.Key">
                        <a href="@post.Value.GetLink()">@post.Value.Title</a>
                        <div>@Html.Raw(Truncate(post.Value.Excerpt, 150))</div>
                    </li>
                }
            </ul>
        </div>

        @if (Model.Page > 0)
        {
            <a rel="next" href="@ViewData["next"]" title="Go back">&laquo;  Back</a>
        }

        @if (!string.IsNullOrWhiteSpace(ViewData["prev"] as string))
        {
            <a rel="prev" href="@ViewData["prev"]" title="More posts">More &raquo;</a>
        }

        @section Head {
            @if (!string.IsNullOrWhiteSpace(ViewData["prev"] as string))
            {
                <link rel="prev" href="@ViewData["prev"]" />
            }
            @if (Model.Page > 0)
            {
                <link rel="next" href="@ViewData["next"]" />
            }
        }
    }
</nav>